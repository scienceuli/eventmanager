# Generated by Django 4.2.20 on 2025-07-01 11:02

import ckeditor.fields
import ckeditor_uploader.fields
import datetime
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import embed_video.fields
import hitcount.models
import private_storage.fields
import private_storage.storage.files
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="EmailTemplate",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "text_template",
                    models.TextField(verbose_name="Vorlage für Text Email"),
                ),
                (
                    "html_template",
                    models.TextField(blank=True, verbose_name="Vorlage für Html Email"),
                ),
                ("counter", models.IntegerField(default=0)),
            ],
            options={
                "verbose_name": "Email-Vorlage",
                "verbose_name_plural": "Email-Vorlagen",
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                (
                    "direct_payment",
                    models.BooleanField(default=False, verbose_name="Warenkorb"),
                ),
                ("vfll_only", models.BooleanField(default=False)),
                ("name", models.CharField(max_length=255)),
                ("oneliner", models.CharField(blank=True, max_length=80)),
                ("slug", models.SlugField(max_length=255, unique=True)),
                ("eventurl", models.URLField(blank=True, null=True)),
                (
                    "image",
                    models.ImageField(
                        default="images/vfll_logo_rot_Bild.jpg", upload_to=""
                    ),
                ),
                (
                    "keywords",
                    models.CharField(
                        blank=True,
                        help_text="Keywords für SEO, bitte mit Komma getrennt angeben.",
                        max_length=255,
                    ),
                ),
                (
                    "pub_status",
                    models.CharField(
                        choices=[
                            ("PUB", "öffentlich"),
                            ("UNPUB", "draft"),
                            ("ARCH", "archiviert"),
                        ],
                        default="PUB",
                        help_text="veröffentlicht: sichtbar und buchbar; draft: nicht sichtbar, nicht buchbar; archiviert: nicht sichtbar, nicht buchbar",
                        max_length=8,
                        verbose_name="Status Veröffentlichung",
                    ),
                ),
                (
                    "frontend_flag",
                    models.BooleanField(
                        default=True, verbose_name="im Frontend zeigen?"
                    ),
                ),
                (
                    "edit_in_frontend",
                    models.BooleanField(
                        default=False, verbose_name="editierbar im Frontend?"
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="eindeutiger Kurzname",
                        max_length=64,
                        unique=True,
                        verbose_name="Kurzname",
                    ),
                ),
                (
                    "description",
                    ckeditor_uploader.fields.RichTextUploadingField(
                        blank=True, verbose_name="Teaser"
                    ),
                ),
                (
                    "meta_description",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Meta Beschreibung",
                    ),
                ),
                (
                    "duration",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Dauer"
                    ),
                ),
                (
                    "target_group",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Zielgruppe"
                    ),
                ),
                (
                    "prerequisites",
                    ckeditor_uploader.fields.RichTextUploadingField(
                        blank=True, null=True, verbose_name="Voraussetzungen"
                    ),
                ),
                (
                    "objectives",
                    ckeditor_uploader.fields.RichTextUploadingField(
                        blank=True, null=True, verbose_name="Lernziele"
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Hier kommt der reduzierte Mitgliederpreis rein. Der volle Preis ist 35% höher, wobei auf 10 Euro aufgerundet wird.",
                        max_digits=10,
                        verbose_name="Mitgliederpreis",
                    ),
                ),
                (
                    "costs",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Kosten der Veranstaltung",
                        max_digits=10,
                        verbose_name="Kosten",
                    ),
                ),
                (
                    "regio_group",
                    models.CharField(
                        choices=[
                            ("KA", "---"),
                            ("BAY", "Bayern"),
                            ("BER", "Berlin"),
                            ("FFM", "Frankfurt"),
                            ("FR", "Freiburg"),
                            ("HH", "Hamburg"),
                            ("KBO", "Köln/Bonn"),
                            ("L", "Leipzig"),
                            ("NDS", "Niedersachsen"),
                            ("RHR", "Rhein/Ruhr"),
                            ("S", "Stuttgart"),
                            ("HB", "Bremen"),
                            ("RHN", "Rhein/Neckar"),
                            ("NFU", "Nürnberg/Fürth"),
                            ("OWL", "Ostwestfalen-Lippe"),
                            ("THU", "Thüringen"),
                        ],
                        default="KA",
                        max_length=3,
                        verbose_name="Regionalgruppe",
                    ),
                ),
                (
                    "methods",
                    ckeditor.fields.RichTextField(
                        blank=True, null=True, verbose_name="Methoden"
                    ),
                ),
                (
                    "contribution",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="VFLL-Beteiligung",
                    ),
                ),
                (
                    "scheduled_status",
                    models.CharField(
                        choices=[
                            ("yet to scheduled", "noch offen"),
                            ("scheduled", "terminiert"),
                        ],
                        default="scheduled",
                        max_length=25,
                    ),
                ),
                ("fees", ckeditor.fields.RichTextField(verbose_name="Gebühren")),
                (
                    "catering",
                    ckeditor.fields.RichTextField(
                        blank=True, null=True, verbose_name="Verpflegung"
                    ),
                ),
                (
                    "lodging",
                    ckeditor.fields.RichTextField(
                        blank=True, null=True, verbose_name="Übernachtung"
                    ),
                ),
                (
                    "total_costs",
                    ckeditor.fields.RichTextField(
                        blank=True, null=True, verbose_name="Gesamtkosten"
                    ),
                ),
                (
                    "registration",
                    ckeditor.fields.RichTextField(blank=True, verbose_name="Anmeldung"),
                ),
                (
                    "registration_possible",
                    models.BooleanField(default=True, verbose_name="Anmeldung möglich"),
                ),
                (
                    "registration_message",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "registration_form",
                    models.CharField(
                        choices=[
                            ("s", "Standard"),
                            ("w", "Willkommensveranstaltung"),
                            ("m", "MV/ZW"),
                            ("f", "Fachtagung 2022/MV"),
                            ("f24", "Fachtagung 2024/MV"),
                        ],
                        default="s",
                        max_length=3,
                        verbose_name="Anmeldeformular",
                    ),
                ),
                (
                    "registration_recipient",
                    models.EmailField(
                        blank=True,
                        help_text="an diese Adresse werden Anmeldungen geschickt",
                        max_length=254,
                        null=True,
                        verbose_name="Anmelde-Email an",
                    ),
                ),
                (
                    "notes",
                    ckeditor.fields.RichTextField(
                        blank=True, null=True, verbose_name="Hinweise"
                    ),
                ),
                ("pdf_file", models.FileField(blank=True, upload_to="pdfs")),
                ("video", embed_video.fields.EmbedVideoField(blank=True, null=True)),
                ("show_video", models.BooleanField(default=False)),
                ("video_comment", models.TextField(blank=True, null=True)),
                (
                    "notes_internal",
                    ckeditor.fields.RichTextField(
                        blank=True, null=True, verbose_name="interne Hinweise"
                    ),
                ),
                (
                    "free_text_field_intro",
                    ckeditor.fields.RichTextField(
                        blank=True, null=True, verbose_name="Freitextfeld Intro"
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(
                        help_text="Datum: Picker verwenden oder in der Form tt.mm.jj; Zeit: hh:mm",
                        null=True,
                        verbose_name="Beginn",
                    ),
                ),
                (
                    "end_date",
                    models.DateTimeField(
                        help_text="Datum: Picker verwenden oder in der Form tt.mm.jj; Zeit: hh:mm",
                        null=True,
                        verbose_name="Ende",
                    ),
                ),
                (
                    "open_date",
                    models.DateTimeField(
                        default=datetime.datetime.now,
                        null=True,
                        verbose_name="Anmeldefrist Beginn",
                    ),
                ),
                (
                    "close_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Anmeldefrist Ende"
                    ),
                ),
                ("first_day", models.DateField(blank=True, null=True)),
                ("last_day", models.DateField(blank=True, null=True)),
                (
                    "show_date",
                    models.BooleanField(default=True, verbose_name="Datum anzeigen"),
                ),
                (
                    "capacity",
                    models.PositiveIntegerField(default=15, verbose_name="Kapazität"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "findet statt"),
                            ("deleted", "verschoben"),
                            ("cancel", "abgesagt"),
                        ],
                        default="active",
                        max_length=10,
                    ),
                ),
                ("moodle_id", models.PositiveSmallIntegerField(default=0)),
                ("moodle_course_created", models.BooleanField(default=False)),
                (
                    "moodle_course_type",
                    models.PositiveSmallIntegerField(
                        choices=[(3, "in Planung"), (4, "Fortbildungen")],
                        default=4,
                        verbose_name="Moodle Kurstyp",
                    ),
                ),
                (
                    "moodle_new_user_flag",
                    models.BooleanField(
                        default=False,
                        help_text="Hier kann für den Kurs festgelegt werden, ob neue Moodle-User die automatische Begrüßungsmail von Moodle (mit Zufallspasswort) bekommen (default=False). Ist das Feld nicht angeklickt, verschickt Moodle keine E-Mail und die neuen User können sich mit dem Standardpasswort anmelden. Bein Änderung dieses Feldes immer erst abspeichern!",
                        verbose_name="Autom. E-Mail an neue Moodle-User",
                    ),
                ),
                (
                    "moodle_standard_password",
                    models.CharField(
                        default="VfllMoodle123#",
                        max_length=24,
                        verbose_name="Moodle Standard-Passwort",
                    ),
                ),
                (
                    "students_number",
                    models.PositiveSmallIntegerField(default=0, editable=False),
                ),
            ],
            options={
                "verbose_name": "Veranstaltung",
                "verbose_name_plural": "Veranstaltungen",
                "ordering": ("start_date",),
            },
            bases=(models.Model, hitcount.models.HitCountMixin),
        ),
        migrations.CreateModel(
            name="EventCategory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("title", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Beschreibung"),
                ),
                (
                    "singular",
                    models.CharField(
                        blank=True,
                        help_text="wird im Frontend als Kategorie angezeigt",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("position", models.PositiveSmallIntegerField(default=1)),
                (
                    "show",
                    models.BooleanField(
                        default=True,
                        help_text="gibt an, ob die Kachel auf der Startseite grundsätzlich gezeigt werden soll. Es werden aber nur die Kacheln angezeigt, zu denen auch eine Veranstaltung besteht.",
                    ),
                ),
                (
                    "registration",
                    models.BooleanField(default=True, verbose_name="Anmeldung möglich"),
                ),
                (
                    "belongs_to_all_events",
                    models.BooleanField(
                        default=True, verbose_name="gehört zu VFLL-Fortbildungen"
                    ),
                ),
            ],
            options={
                "verbose_name": "Kategorie",
                "verbose_name_plural": "Kategorien",
                "ordering": ("position",),
            },
        ),
        migrations.CreateModel(
            name="EventCollection",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                ("name", models.CharField(max_length=255)),
                ("slug", models.SlugField(max_length=255, unique=True)),
                (
                    "frontend_flag",
                    models.BooleanField(
                        default=True, verbose_name="im Frontend zeigen?"
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="eindeutiger Kurzname",
                        max_length=64,
                        unique=True,
                        verbose_name="Kurzname",
                    ),
                ),
                (
                    "description",
                    ckeditor_uploader.fields.RichTextUploadingField(
                        blank=True, verbose_name="Teaser"
                    ),
                ),
                ("first_day", models.DateField(blank=True, null=True)),
                ("last_day", models.DateField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Bildungsangebot",
                "verbose_name_plural": "Bildungsangebote",
                "ordering": ("first_day",),
            },
        ),
        migrations.CreateModel(
            name="EventExternalSponsor",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, max_length=128, verbose_name="Vorname"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=255, verbose_name="E-Mail"
                    ),
                ),
                ("text", models.TextField(blank=True)),
                (
                    "phone",
                    models.CharField(blank=True, max_length=64, verbose_name="Tel"),
                ),
                ("url", models.URLField(blank=True, verbose_name="Website")),
                ("image", models.ImageField(blank=True, upload_to="externalsponsors/")),
            ],
            options={
                "verbose_name": "Sponsor",
                "verbose_name_plural": "Sponsoren",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="EventFormat",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=255, unique=True, verbose_name="Format"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Beschreibung"),
                ),
                ("moodle", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Format",
                "verbose_name_plural": "Formate",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="EventLocation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                (
                    "address_line",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Adresszusatz",
                    ),
                ),
                (
                    "street",
                    models.CharField(
                        blank=True, max_length=55, null=True, verbose_name="Straße"
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Stadt"
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Bundesland"
                    ),
                ),
                (
                    "postcode",
                    models.CharField(
                        blank=True, max_length=64, null=True, verbose_name="PLZ"
                    ),
                ),
                (
                    "country",
                    django_countries.fields.CountryField(
                        default="DE", max_length=2, verbose_name="Land"
                    ),
                ),
                ("title", models.CharField(max_length=128, verbose_name="Name")),
                (
                    "url",
                    models.URLField(
                        blank=True, verbose_name="Veranstaltungsort Website"
                    ),
                ),
            ],
            options={
                "verbose_name": "Veranstaltungsort",
                "verbose_name_plural": "Veranstaltungsorte",
            },
        ),
        migrations.CreateModel(
            name="EventMember",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                (
                    "address_line",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Adresszusatz",
                    ),
                ),
                (
                    "street",
                    models.CharField(
                        blank=True, max_length=55, null=True, verbose_name="Straße"
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Stadt"
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Bundesland"
                    ),
                ),
                (
                    "postcode",
                    models.CharField(
                        blank=True, max_length=64, null=True, verbose_name="PLZ"
                    ),
                ),
                (
                    "country",
                    django_countries.fields.CountryField(
                        default="DE", max_length=2, verbose_name="Land"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Kurzbezeichnung",
                    ),
                ),
                (
                    "academic",
                    models.CharField(
                        blank=True, max_length=40, null=True, verbose_name="Titel"
                    ),
                ),
                (
                    "firstname",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Vorname"
                    ),
                ),
                (
                    "lastname",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Nachname"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=255, verbose_name="E-Mail"
                    ),
                ),
                (
                    "phone",
                    models.CharField(blank=True, max_length=64, verbose_name="Tel"),
                ),
                (
                    "company",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Firma"
                    ),
                ),
                (
                    "vfll",
                    models.BooleanField(default=False, verbose_name="VFLL-Mitglied"),
                ),
                (
                    "memberships",
                    models.CharField(
                        blank=True, max_length=64, verbose_name="Mitgliedschaften"
                    ),
                ),
                (
                    "attention",
                    models.CharField(
                        blank=True,
                        max_length=64,
                        verbose_name="aufmerksamen geworden durch",
                    ),
                ),
                (
                    "attention_other",
                    models.CharField(
                        blank=True, max_length=64, verbose_name="sonstige"
                    ),
                ),
                (
                    "education_bonus",
                    models.BooleanField(default=False, verbose_name="Bildungsprämie"),
                ),
                ("message", models.TextField(blank=True, verbose_name="Anmerkung")),
                (
                    "free_text_field",
                    models.TextField(blank=True, verbose_name="Freitext"),
                ),
                (
                    "agree",
                    models.BooleanField(default=False, verbose_name="Einverständnis"),
                ),
                ("label", models.CharField(max_length=64)),
                (
                    "attend_status",
                    models.CharField(
                        choices=[
                            ("registered", "angemeldet"),
                            ("waiting", "Warteliste"),
                            ("attending", "nimmt teil"),
                            ("absent", "nicht erschienen"),
                            ("cancelled", "abgesagt"),
                        ],
                        max_length=10,
                        verbose_name="Status",
                    ),
                ),
                (
                    "mail_to_admin",
                    models.BooleanField(default=False, verbose_name="m > admin"),
                ),
                (
                    "mail_to_member",
                    models.BooleanField(default=False, verbose_name="m > member"),
                ),
                ("via_form", models.BooleanField(default=False, verbose_name="AF")),
                (
                    "moodle_id",
                    models.PositiveIntegerField(default=0, verbose_name="MoodleID"),
                ),
                ("enroled", models.BooleanField(default=False, verbose_name=">m")),
                (
                    "takes_part",
                    models.BooleanField(default=False, verbose_name="Teilnahme"),
                ),
                (
                    "member_type",
                    models.CharField(
                        blank=True,
                        default=None,
                        max_length=1,
                        null=True,
                        verbose_name="Art der Mitgliedschaft",
                    ),
                ),
                (
                    "vote_transfer",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Stimmübertragung"
                    ),
                ),
                (
                    "vote_transfer_check",
                    models.BooleanField(
                        default=False, verbose_name="Check Stimmübertragung"
                    ),
                ),
                ("data", models.JSONField(blank=True, null=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="members",
                        to="events.event",
                        verbose_name="Veranstaltung",
                    ),
                ),
            ],
            options={
                "verbose_name": "TeilnehmerIn",
                "verbose_name_plural": "TeilnehmerInnen",
            },
        ),
        migrations.CreateModel(
            name="EventOrganizer",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "contact",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Kontakt"
                    ),
                ),
                (
                    "url",
                    models.URLField(blank=True, verbose_name="Veranstalter Website"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EventSpeaker",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=128, verbose_name="Vorname"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(max_length=128, verbose_name="Nachname"),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=255, verbose_name="E-Mail"
                    ),
                ),
                (
                    "phone",
                    models.CharField(blank=True, max_length=64, verbose_name="Tel"),
                ),
                ("bio", models.TextField(blank=True, verbose_name="Biografie")),
                ("url", models.URLField(blank=True, verbose_name="Website")),
                (
                    "social_url",
                    models.URLField(blank=True, verbose_name="Soziale Medien"),
                ),
                ("image", models.ImageField(blank=True, upload_to="speaker/")),
            ],
            options={
                "verbose_name": "Dozent*in",
                "verbose_name_plural": "Dozent*innen",
                "ordering": ("last_name",),
            },
        ),
        migrations.CreateModel(
            name="EventSponsor",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=128, verbose_name="Vorname"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(max_length=128, verbose_name="Nachname"),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=255, verbose_name="E-Mail"
                    ),
                ),
                (
                    "phone",
                    models.CharField(blank=True, max_length=64, verbose_name="Tel"),
                ),
                ("url", models.URLField(blank=True, verbose_name="Website")),
                ("image", models.ImageField(blank=True, upload_to="speaker/")),
            ],
            options={
                "verbose_name": "Pat*in",
                "verbose_name_plural": "Pat*innen",
                "ordering": ("last_name",),
            },
        ),
        migrations.CreateModel(
            name="Home",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                ("name", models.CharField(max_length=40, verbose_name="Name")),
                (
                    "title",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Titel"
                    ),
                ),
                ("text", models.TextField(blank=True, verbose_name="Haupttext")),
                (
                    "image",
                    models.ImageField(
                        default="images/vfll_logo_rot_Bild.jpg", upload_to="home/"
                    ),
                ),
                (
                    "keywords",
                    models.CharField(
                        blank=True,
                        help_text="Keywords für SEO, bitte mit Komma getrennt angeben.",
                        max_length=255,
                        null=True,
                        verbose_name="Keywords",
                    ),
                ),
            ],
            options={
                "verbose_name": "Home",
                "verbose_name_plural": "Home",
            },
        ),
        migrations.CreateModel(
            name="MemberRole",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                (
                    "roleid",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Manager*in"),
                            (3, "Trainer*in"),
                            (5, "Teilnehmer*in"),
                        ]
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MyModel",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="Title")),
                (
                    "file",
                    private_storage.fields.PrivateFileField(
                        storage=private_storage.storage.files.PrivateFileSystemStorage(),
                        upload_to="",
                        verbose_name="File",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PayLessAction",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "title",
                    ckeditor.fields.RichTextField(
                        blank=True, null=True, verbose_name="Anzeigetitel"
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("n", "n für m"), ("p", "Prozente")],
                        default="n",
                        max_length=1,
                    ),
                ),
                (
                    "percents",
                    models.SmallIntegerField(
                        blank=True, default=0, null=True, verbose_name="Prozente"
                    ),
                ),
                (
                    "price_premium",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="normaler Preis",
                    ),
                ),
                (
                    "price_members",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Rabattpreis",
                    ),
                ),
            ],
            options={
                "verbose_name": "Pay-Less-Aktion",
                "verbose_name_plural": "Pay-Less-Aktionen",
            },
        ),
        migrations.CreateModel(
            name="VfllMemberEmail",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("email", models.EmailField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name="PrivateDocument",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                ("title", models.CharField(max_length=255, verbose_name="Titel")),
                (
                    "description",
                    models.TextField(
                        blank=True, null=True, verbose_name="Beschreibung"
                    ),
                ),
                (
                    "upload",
                    private_storage.fields.PrivateFileField(
                        storage=private_storage.storage.files.PrivateFileSystemStorage(),
                        upload_to="uploaded_private_documents/",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_private_documents",
                        to="events.event",
                    ),
                ),
            ],
            options={
                "verbose_name": "privates Dokument",
                "verbose_name_plural": "private Dokumente",
            },
        ),
        migrations.CreateModel(
            name="EventSponsorThrough",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                ("position", models.PositiveSmallIntegerField(default=1)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="events.event",
                        verbose_name="Veranstaltung",
                    ),
                ),
                (
                    "eventsponsor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="events.eventsponsor",
                        verbose_name="Pat*in",
                    ),
                ),
            ],
            options={
                "verbose_name": "Pat*in",
                "verbose_name_plural": "Pat*innen",
                "ordering": ["position"],
            },
        ),
        migrations.CreateModel(
            name="EventSpeakerThrough",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="events.event",
                        verbose_name="Veranstaltung",
                    ),
                ),
                (
                    "eventspeaker",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="events.eventspeaker",
                        verbose_name="Dozent*in",
                    ),
                ),
            ],
            options={
                "verbose_name": "Dozent*in",
                "verbose_name_plural": "Dozent*innen",
            },
        ),
        migrations.CreateModel(
            name="EventQuestion",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.CharField(max_length=255)),
                ("required", models.BooleanField(default=False)),
                (
                    "type",
                    models.CharField(
                        choices=[("text", "Text"), ("choice", "Choice")],
                        default="text",
                        max_length=20,
                    ),
                ),
                (
                    "choices",
                    models.TextField(
                        blank=True, help_text="Comma-separated choices for choice type."
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="events.event",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventMemberRole",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                (
                    "eventmember",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="events.eventmember",
                    ),
                ),
                (
                    "memberrole",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="events.memberrole",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rolle",
                "verbose_name_plural": "Rollen",
            },
        ),
        migrations.CreateModel(
            name="EventMemberChangeDate",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                ("action", models.CharField(blank=True, max_length=255, null=True)),
                ("change_date", models.DateTimeField()),
                (
                    "event_member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="change_dates",
                        to="events.eventmember",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="eventmember",
            name="roles",
            field=models.ManyToManyField(
                through="events.EventMemberRole", to="events.memberrole"
            ),
        ),
        migrations.CreateModel(
            name="EventImage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                ("image", models.ImageField(upload_to="event_image/")),
                (
                    "image_form",
                    models.CharField(
                        choices=[
                            ("r", "rechteckig"),
                            ("s", "quadratisch"),
                            ("c", "rund"),
                        ],
                        default="r",
                        max_length=1,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[("d", "Beschreibung")], default="d", max_length=1
                    ),
                ),
                (
                    "description",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("caption", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "event",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="eventimage",
                        to="events.event",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EventHighlight",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                (
                    "event",
                    models.ForeignKey(
                        limit_choices_to={
                            "first_day__gte": datetime.date(2025, 7, 1),
                            "pub_status": "PUB",
                        },
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="highlight",
                        to="events.event",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventExternalSponsorThrough",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                ("position", models.PositiveSmallIntegerField(default=1)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="events.event",
                        verbose_name="Veranstaltung",
                    ),
                ),
                (
                    "eventexternalsponsor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="events.eventexternalsponsor",
                        verbose_name="Sponsor",
                    ),
                ),
            ],
            options={
                "verbose_name": "Sponsor",
                "verbose_name_plural": "Sponsoren",
                "ordering": ["position"],
            },
        ),
        migrations.CreateModel(
            name="EventDocument",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                ("title", models.CharField(max_length=255, verbose_name="Titel")),
                (
                    "description",
                    models.TextField(
                        blank=True, null=True, verbose_name="Beschreibung"
                    ),
                ),
                (
                    "emphasize",
                    models.BooleanField(default=False, verbose_name="hervorheben"),
                ),
                ("upload", models.FileField(upload_to="documents/")),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_documents",
                        to="events.event",
                    ),
                ),
            ],
            options={
                "verbose_name": "öffentliches Dokument",
                "verbose_name_plural": "öffentliche Dokumente",
            },
        ),
        migrations.CreateModel(
            name="EventDay",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                (
                    "start_date",
                    models.DateField(
                        help_text="Datum: Picker verwenden oder in der Form tt.mm.jj",
                        verbose_name="Datum",
                    ),
                ),
                (
                    "start_time",
                    models.TimeField(help_text="hh:mm", verbose_name="Beginn"),
                ),
                ("end_time", models.TimeField(help_text="hh:mm", verbose_name="Ende")),
                (
                    "start_time_remark",
                    models.CharField(
                        blank=True,
                        max_length=60,
                        null=True,
                        verbose_name="Ergänzung Startzeit",
                    ),
                ),
                (
                    "end_time_remark",
                    models.CharField(
                        blank=True,
                        max_length=60,
                        null=True,
                        verbose_name="Ergänzung Endzeit",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_days",
                        to="events.event",
                    ),
                ),
            ],
            options={
                "verbose_name": "Veranstaltungstag",
                "verbose_name_plural": "Veranstaltungstage",
                "ordering": ("start_date",),
            },
        ),
        migrations.CreateModel(
            name="EventAnswer",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("answer_text", models.TextField()),
                (
                    "participant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answers",
                        to="events.eventmember",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="events.eventquestion",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventAgenda",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                (
                    "session_name",
                    models.CharField(max_length=120, verbose_name="Programmteil"),
                ),
                (
                    "start_time",
                    models.TimeField(blank=True, null=True, verbose_name="Beginn"),
                ),
                (
                    "end_time",
                    models.TimeField(blank=True, null=True, verbose_name="Ende"),
                ),
                (
                    "position",
                    models.PositiveSmallIntegerField(
                        help_text="Reihenfolge der Programme in der Anezige",
                        null=True,
                        verbose_name="Reihenfolge",
                    ),
                ),
                (
                    "venue_name",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="wo"
                    ),
                ),
                (
                    "description",
                    ckeditor.fields.RichTextField(blank=True, verbose_name="Programm"),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="agendas",
                        to="events.event",
                    ),
                ),
            ],
            options={
                "verbose_name": "Programm",
                "verbose_name_plural": "Programme",
                "ordering": ("position",),
            },
        ),
        migrations.AddField(
            model_name="event",
            name="category",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="events",
                to="events.eventcategory",
                verbose_name="Kategorie",
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="event_collection",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="events",
                to="events.eventcollection",
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="eventformat",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="events.eventformat"
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="externalsponsors",
            field=models.ManyToManyField(
                through="events.EventExternalSponsorThrough",
                to="events.eventexternalsponsor",
                verbose_name="Sponsor",
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="location",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="location_events",
                to="events.eventlocation",
                verbose_name="Veranstaltungsort",
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="organizer",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="organizer_events",
                to="events.eventorganizer",
                verbose_name="Veranstalter",
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="payless_collection",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="events",
                to="events.paylessaction",
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="speaker",
            field=models.ManyToManyField(
                through="events.EventSpeakerThrough",
                to="events.eventspeaker",
                verbose_name="Dozent*innen",
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="sponsors",
            field=models.ManyToManyField(
                through="events.EventSponsorThrough",
                to="events.eventsponsor",
                verbose_name="Pate,Patin",
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="visible_to_groups",
            field=models.ManyToManyField(
                blank=True, related_name="visible_events", to="auth.group"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="eventmember",
            unique_together={("event", "name")},
        ),
        migrations.AddConstraint(
            model_name="eventhighlight",
            constraint=models.CheckConstraint(
                check=models.Q(("id", 1)), name="events_eventhighlight_single_instance"
            ),
        ),
    ]
