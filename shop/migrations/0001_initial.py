# Generated by Django 4.2.20 on 2025-07-01 11:02

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("events", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                (
                    "address_line",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Adresszusatz",
                    ),
                ),
                (
                    "street",
                    models.CharField(
                        blank=True, max_length=55, null=True, verbose_name="Straße"
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Stadt"
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Bundesland"
                    ),
                ),
                (
                    "postcode",
                    models.CharField(
                        blank=True, max_length=64, null=True, verbose_name="PLZ"
                    ),
                ),
                (
                    "country",
                    django_countries.fields.CountryField(
                        default="DE", max_length=2, verbose_name="Land"
                    ),
                ),
                ("firstname", models.CharField(max_length=50, verbose_name="Vorname")),
                ("lastname", models.CharField(max_length=50, verbose_name="Nachname")),
                (
                    "academic",
                    models.CharField(
                        blank=True, max_length=40, null=True, verbose_name="Titel"
                    ),
                ),
                (
                    "company",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Firma"
                    ),
                ),
                (
                    "phone",
                    models.CharField(blank=True, max_length=64, verbose_name="Tel"),
                ),
                ("email", models.EmailField(max_length=254, verbose_name="E-Mail")),
                (
                    "payment_type",
                    models.CharField(
                        choices=[("n", "---"), ("p", "PayPal"), ("r", "Rechnung")],
                        default="r",
                        max_length=1,
                        verbose_name="Bezahltyp",
                    ),
                ),
                (
                    "discounted",
                    models.BooleanField(default=True, verbose_name="reduziert"),
                ),
                ("paid", models.BooleanField(default=False, verbose_name="bezahlt")),
                ("storno", models.BooleanField(default=False, verbose_name="Storno")),
                (
                    "payment_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Rechnungsdatum"
                    ),
                ),
                (
                    "payment_receipt",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Zahlungseingang"
                    ),
                ),
                (
                    "mail_sent_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Rechnungsversand"
                    ),
                ),
                (
                    "reminder_sent_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Mahnungsversand"
                    ),
                ),
                ("download_marker", models.BooleanField(default=False)),
                (
                    "replacement_event",
                    models.CharField(
                        blank=True,
                        help_text="Zum Überschreiben des automatisch erzeugten Veranstaltungstitels. Funktioniert nur, wenn die Rechnung nur 1 NICHT STORNIERTE Veranstaltung enthält.",
                        max_length=255,
                        null=True,
                        verbose_name="Ersatzangabe Event Name",
                    ),
                ),
                (
                    "replacement_date",
                    models.CharField(
                        blank=True,
                        help_text="Zum Überschreiben des automatisch erzeugten Veranstaltungsdatums. Funktioniert nur, wenn die Rechnung nur 1 NICHT STORNIERTE Veranstaltung enthält.",
                        max_length=40,
                        null=True,
                        verbose_name="Ersatzangabe Event Datum",
                    ),
                ),
                (
                    "use_replacements",
                    models.BooleanField(
                        default=False,
                        help_text="Anklicken, um Ersatzangaben zu benutzen",
                        verbose_name="Ersatzangaben benutzen",
                    ),
                ),
            ],
            options={
                "ordering": ["-date_created"],
            },
        ),
        migrations.CreateModel(
            name="OrderNote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="angelegt am"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="geändert am"),
                ),
                ("title", models.CharField(max_length=255, verbose_name="Titel")),
                ("note", models.TextField(verbose_name="Notiz")),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notes",
                        to="shop.order",
                        verbose_name="Bestellung",
                    ),
                ),
            ],
            options={
                "verbose_name": "Notiz",
                "verbose_name_plural": "Notizen",
                "ordering": ["-date_created"],
            },
        ),
        migrations.CreateModel(
            name="OrderItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("premium_price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("quantity", models.PositiveIntegerField(default=1)),
                ("is_action_price", models.BooleanField(default=False)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("r", "registriert"),
                            ("w", "Warteliste"),
                            ("s", "storniert"),
                            ("n", "nicht erschienen"),
                            ("u", "unklar"),
                            ("c", "Veranstaltung abgesagt"),
                        ],
                        default="r",
                        max_length=1,
                    ),
                ),
                (
                    "cost",
                    models.DecimalField(
                        decimal_places=2, editable=False, max_digits=10
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="order_items",
                        to="events.event",
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="shop.order",
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(
                fields=["-date_created"], name="shop_order_date_cr_c0e4ae_idx"
            ),
        ),
    ]
